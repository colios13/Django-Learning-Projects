# drf_course
drf_course/staticfiles/
drf_course/mediafiles/

# Byte-compiled / optimized / DLL files
drf_course/backend/drf_course/__pycache__/
drf_course/backend/core/__pycache__/
drf_course/*.py[cod]
drf_course/*$py.class

# C extensions
drf_course/*.so

# Distribution / packaging
drf_course/.Python
drf_course/build/
drf_course/develop-eggs/
drf_course/dist/
drf_course/downloads/
drf_course/eggs/
drf_course/.eggs/
drf_course/lib/
drf_course/lib64/
drf_course/parts/
drf_course/sdist/
drf_course/var/
drf_course/wheels/
drf_course/share/python-wheels/
drf_course/*.egg-info/
drf_course/.installed.cfg
drf_course/*.egg
drf_course/MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
drf_course/*.manifest
drf_course/*.spec

# Installer logs
drf_course/pip-log.txt
drf_course/pip-delete-this-directory.txt

# Unit test / coverage reports
drf_course/htmlcov/
drf_course/.tox/
drf_course/.nox/
drf_course/.coverage
drf_course/.coverage.*
drf_course/.cache
drf_course/nosetests.xml
drf_course/coverage.xml
drf_course/*.cover
drf_course/*.py,cover
drf_course/.hypothesis/
drf_course/.pytest_cache/
drf_course/cover/

# Translations
drf_course/*.mo
drf_course/*.pot


# Django stuff:
drf_course/backend/*.log
drf_course/backend/local_settings.py
drf_course/backend/db.sqlite3
drf_course/backend/db.sqlite3-journal

# Flask stuff:
drf_course/instance/
drf_course/.webassets-cache

# Scrapy stuff:
drf_course/.scrapy

# Sphinx documentation
drf_course/docs/_build/

# PyBuilder
drf_course/.pybuilder/
drf_course/target/

# Jupyter Notebook
drf_course/.ipynb_checkpoints

# IPython
drf_course/profile_default/
drf_course/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
drf_course/__pypackages__/

# Celery stuff
drf_course/celerybeat-schedule
drf_course/celerybeat.pid

# SageMath parsed files
drf_course/*.sage.py

# Environments
drf_course/.env
drf_course/.env.prod
drf_course/.env.dev
drf_course/.env.staging
drf_course/.venv
# env/
drf_course/venv/
drf_course/ENV/
drf_course/env.bak/
drf_course/venv.bak/

# Spyder project settings
drf_course/.spyderproject
drf_course/.spyproject

# Rope project settings
drf_course/.ropeproject

# mkdocs documentation
drf_course//site

# mypy
drf_course/.mypy_cache/
drf_course/.dmypy.json
drf_course/dmypy.json

# Pyre type checker
drf_course/.pyre/

# pytype static type analyzer
drf_course/.pytype/

# Cython debug symbols
drf_course/cython_debug/

drf_course/.DS_Store

drf_course/*.dump